/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKHDMI_CEC_DRIVER_H
#define _MOCKHDMI_CEC_DRIVER_H

#include "unity.h"
#include "hdmi_cec_driver.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockhdmi_cec_driver_Init(void);
void Mockhdmi_cec_driver_Destroy(void);
void Mockhdmi_cec_driver_Verify(void);




#define HdmiCecOpen_ExpectAndReturn(handle, cmock_retval) HdmiCecOpen_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void HdmiCecOpen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int* handle, int cmock_to_return);
#define HdmiCecClose_ExpectAndReturn(handle, cmock_retval) HdmiCecClose_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void HdmiCecClose_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, int cmock_to_return);
#define HdmiCecSetLogicalAddress_ExpectAndReturn(handle, logicalAddresses, num, cmock_retval) HdmiCecSetLogicalAddress_CMockExpectAndReturn(__LINE__, handle, logicalAddresses, num, cmock_retval)
void HdmiCecSetLogicalAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, int* logicalAddresses, int num, int cmock_to_return);
#define HdmiCecGetPhysicalAddress_Expect(handle, physicalAddress) HdmiCecGetPhysicalAddress_CMockExpect(__LINE__, handle, physicalAddress)
void HdmiCecGetPhysicalAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, int handle, unsigned int* physicalAddress);
#define HdmiCecAddLogicalAddress_ExpectAndReturn(handle, logicalAddresses, cmock_retval) HdmiCecAddLogicalAddress_CMockExpectAndReturn(__LINE__, handle, logicalAddresses, cmock_retval)
void HdmiCecAddLogicalAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, int logicalAddresses, int cmock_to_return);
#define HdmiCecRemoveLogicalAddress_ExpectAndReturn(handle, logicalAddresses, cmock_retval) HdmiCecRemoveLogicalAddress_CMockExpectAndReturn(__LINE__, handle, logicalAddresses, cmock_retval)
void HdmiCecRemoveLogicalAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, int logicalAddresses, int cmock_to_return);
#define HdmiCecGetLogicalAddress_ExpectAndReturn(handle, devType, logicalAddress, cmock_retval) HdmiCecGetLogicalAddress_CMockExpectAndReturn(__LINE__, handle, devType, logicalAddress, cmock_retval)
void HdmiCecGetLogicalAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, int devType, int* logicalAddress, int cmock_to_return);
#define HdmiCecSetRxCallback_ExpectAndReturn(handle, cbfunc, data, cmock_retval) HdmiCecSetRxCallback_CMockExpectAndReturn(__LINE__, handle, cbfunc, data, cmock_retval)
void HdmiCecSetRxCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, HdmiCecRxCallback_t cbfunc, void* data, int cmock_to_return);
#define HdmiCecSetTxCallback_ExpectAndReturn(handle, cbfunc, data, cmock_retval) HdmiCecSetTxCallback_CMockExpectAndReturn(__LINE__, handle, cbfunc, data, cmock_retval)
void HdmiCecSetTxCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, HdmiCecTxCallback_t cbfunc, void* data, int cmock_to_return);
#define HdmiCecTx_ExpectAndReturn(handle, buf, len, result, cmock_retval) HdmiCecTx_CMockExpectAndReturn(__LINE__, handle, buf, len, result, cmock_retval)
void HdmiCecTx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, const unsigned char* buf, int len, int* result, int cmock_to_return);
#define HdmiCecTxAsync_ExpectAndReturn(handle, buf, len, cmock_retval) HdmiCecTxAsync_CMockExpectAndReturn(__LINE__, handle, buf, len, cmock_retval)
void HdmiCecTxAsync_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int handle, const unsigned char* buf, int len, int cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
